# -- configuration to be shared between the authentication components
authentication:
  generatePasswords:
    # -- should a password for the database connection of authentication components be generated in the cluster
    enabled: true
    #-- name of the secret to put the generated password into
    secretName: authentication-database-secret

# -- configuration to be shared between the dataplane components
dataplane:
  generatePasswords:
    # -- should a password for the database connection of dataplane components be generated in the cluster
    enabled: true
    #-- name of the secret to put the generated password into
    secretName: data-service-secret

# -- configuration to be shared between the issuance components
issuance:
  generatePasswords:
    # -- should a password for the database connection of issuance components be generated in the cluster
    enabled: true
    #-- name of the secret to put the generated password into
    secretName: issuance-secret

# -- configuration for the mysql to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/mysql for all options
mysql:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: authentication-mysql
  # -- configure authentication to mysql
  auth:
    # -- name of the secret to take the passowrds from
    existingSecret: authentication-database-secret
  # -- scripts to be executed on db startup
  initdbScripts:
    create.sql: |
      CREATE DATABASE tildb;
      CREATE DATABASE ccsdb;

# -- configuration for the trusted-issuers-list to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/trusted-issuers-list for all options
trusted-issuers-list:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: trusted-issuers-list
  # -- connection to the database
  database:
    # -- should persistence be used?
    persistence: true
    # -- name of the db user
    username: root
    # -- configuration for the existing secret to get the passwords from
    existingSecret:
      enabled: true
      name: authentication-database-secret
      key: mysql-root-password
    # -- host of the database
    host: authentication-mysql
    # -- name of the schema inside the db
    name: tildb

# -- configuration for the vcverifier to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/vcverifier for all options
vcverifier:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: verifier
  # -- configuration for the m2m flow, in case the tir is requiring authentication
  m2m:
    # -- we do not need authentication here
    authEnabled: false

# -- configuration for the digital-signature.service to be deployed as part of the connector in case of did:elsi support
dss:
  # -- should it be enabled?
  enabled: false
  # -- allows to set a fixed name for the services
  fullnameOverride: dss
  # -- can be used to provide the crl for ca's provided as truststore to the dss
  crl:
    # -- should it be enabled?
    enabled: false


# -- configuration for the credentials-config-service to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/credentials-config-service for all options
credentials-config-service:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: credentials-config-service
  # -- connection to the database
  database:
    # -- should persistence be used?
    persistence: true
    # -- name of the db user
    username: root
    # -- configuration for the existing secret to get the passwords from
    existingSecret:
      enabled: true
      name: authentication-database-secret
      key: mysql-root-password
    # -- host of the database
    host: authentication-mysql
    # -- name of the schema inside the db
    name: ccsdb
  registration:
    enabled: false
# -- configuration for the postgresql to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for all options
postgresql:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  image:
    # -- fixes the unpullable image referenced in the chart
    tag: 13.18.0
  # -- allows to set a fixed name for the services
  fullnameOverride: postgresql
  generatePasswords:
    # -- should a password for the database be generated in the cluster
    enabled: true
    # -- name of the secret to store the password in
    secretName: database-secret
  # -- configure authentication to mysql
  auth:
    # -- name of the secret to take the passowrds from
    existingSecret: database-secret
    # -- key of the secrets inside the secret
    secretKeys:
      adminPasswordKey: postgres-admin-password
      userPasswordKey: postgres-user-password
  # -- configuration for the primary of the db
  primary:
    # -- scripts to be run on intialization
    initdb:
      scripts:
        create.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE pap;"
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE keycloak;"
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE rainbow;"

# -- configuration for the odrl-pap to be deployed as part of the connector, see https://github.com/FIWARE/helm-charts/tree/main/charts/odrl-pap for all options
odrl-pap:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- allows to set a fixed name for the services
  fullnameOverride: odrl-pap
  # -- connection to the database
  database:
    # -- url to connect the db at
    url: jdbc:postgresql://postgresql:5432/pap
    # -- username to access the db
    username: postgres
    # -- secret to take the password from
    existingSecret:
      enabled: true
      name: database-secret
      key: postgres-admin-password

# -- configuration for the open-policy-agent to be deployed as part of the connector fulfilling the role of the PDP, as a sidecar to apisix
opa:
  # -- should an opa sidecar be deployed to apisix
  enabled: true
  # -- address of the pap to get the policies from
  resourceUrl: http://odrl-pap:8080/bundles/service/v1
  # -- port to make opa available at
  port: 8181
  # -- pull delays for the policies bundle
  policies:
    minDelay: 2
    maxDelay: 4
  # -- pull delays for the methods bundle
  methods:
    minDelay: 1
    maxDelay: 3
  # -- pull delays for the data bundle
  data:
    minDelay: 1
    maxDelay: 15


# -- integration of checks for the transfer process protocol
tpp:
  # -- should checking for a running transfer process be enabled
  enabled: false
  transfers:
    # -- host of the endpoint to check the process id, e.g. rainbow
    host: ""
    # -- path to check the id at
    path: /transfers
  
# -- configuration for apisix to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/apisix for all options
apisix:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- configuration in regard to the apisix control plane
  controlPlane:
    # -- should it be enabled
    enabled: true
    # -- resource preset to have sufficient memory
    resourcesPreset: small
  # -- configuration in regard to the apisix ingressController
  ingressController:
    # -- should it be enabled
    enabled: false
  # -- configuration in regard to the apisix etcd
  etcd:
    # -- should it be enabled
    enabled: true
    # -- persistence configuration of etcd
    persistence:
      # -- should it be enabled
      enabled: false
  # -- configuration in regard to the apisix dataplane
  dataPlane:
    # -- resource preset to have sufficient memory
    resourcesPreset: small
    # -- configuration for extra configmaps to be deployed
    extraConfig:
      deployment:
        # -- allows to configure apisix through a yaml file
        role_data_plane:
          config_provider: yaml
      apisix:
        extra_lua_path: /extra/apisix/plugins/?.lua
    # -- extra volumes
    # we need `routes` to declaratively configure the routes
    # and the config for the opa sidecar
    extraVolumes:
      - name: routes
        configMap:
          name: apisix-routes
      - name: opa-config
        configMap:
          name: opa-config
      - name: opa-lua
        configMap:
          name: opa-lua
      - name: tpp-policy
        configMap:
          name: tpp-policy
    # -- extra volumes to be mounted
    extraVolumeMounts:
      - name: routes
        mountPath: /usr/local/apisix/conf/apisix.yaml
        subPath: apisix.yaml
      - name: opa-lua
        mountPath: /usr/local/apisix/apisix/plugins/opa/helper.lua
        subPath: helper.lua
      - name: opa-lua
        mountPath: /usr/local/apisix/apisix/plugins/opa.lua
        subPath: opa.lua
    # -- sidecars to be deployed for apisix
    sidecars:
      # -- we want to deploy the open-policy-agent as a pdp
      - name: open-policy-agent
        image: openpolicyagent/opa:1.2.0
        imagePullPolicy: IfNotPresent
        ports:
          - name: http
            containerPort: 8181
            protocol: TCP
        # opa should be started to listen at 8181 and get its config from the mounted config yaml
        args:
          - "run"
          - "--ignore=.*"  # exclude hidden dirs created by Kubernetes
          - "--server"
          - "-l"
          - "debug"
          - "-c"
          - "/config/opa.yaml"
          - "--addr"
          - "0.0.0.0:8181"
          - "/tpp/tpp.rego"
        volumeMounts:
          - name: opa-config
            mountPath: /config
          - name: tpp-policy
            mountPath: /tpp
  # -- configuration in regard to the apisix dashboard
  dashboard:
    # -- should it be enabled
    enabled: false
    # -- resource preset to have sufficient memory
    resourcesPreset: small
 
  # -- configuration of a catchAll-route(e.g. /*)
  catchAllRoute:
    # -- should it be enabled
    enabled: true
    # -- configuration to connect the upstream broker
    upstream:
      url: http://my-broker:8000
    # -- configuration to verify the jwt, coming from the verifier
    oidc:
      clientId: mySecuredService
      discoveryEndpoint: http://verifier:3000/services/mySecuredService/.well-known/openid-configuration

  # -- configuration of routes for apisix
  routes:
#    - uri: /myRoute
#      upstream:
#        nodes:
#            http://my-upstream-service:8080: 1
#        type: roundrobin
#      plugins:
#        openid-connect:
#          client_id: test-id
#          client_secret: the-secret
#          bearer_only: true
#          use_jwks: true
#          discovery: http://the-service/.well-known/openid-configuration
#        opa:
#          host: "http://localhost:8181"
#          policy: policy/main/allow

# -- configuration for the postgresql to be deployed as part of the connector, see https://github.com/bitnami/charts/tree/main/bitnami/postgresql for all options
postgis:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  image:
    # -- fixes the unpullable image referenced in the chart
    tag: 13.18.0
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  fullnameOverride: data-service-postgis
  # -- overrides the generated name, provides stable service names - this should be avoided if multiple instances are available in the same namespace
  nameOverride: data-service-postgis
  ## auth configuration for the database
  auth:
    existingSecret: data-service-secret
    secretKeys:
      adminPasswordKey: postgres-admin-password
      userPasswordKey: postgres-user-password
  ## configuration of the postgres primary replicas
  primary:
    ## provide db initialization
    initdb:
      ## provide scripts for initialization
      scripts:
        # -- enable the postgis extension and create the database as expected by scorpio
        enable.sh: |
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE EXTENSION postgis;"
          psql postgresql://postgres:${POSTGRES_PASSWORD}@localhost:5432 -c "CREATE DATABASE ngb;"

## configuration of the context-broker - see https://github.com/FIWARE/helm-charts/tree/main/charts/scorpio-broker-aaio for details
scorpio:
  fullnameOverride: data-service-scorpio
  # -- should scorpio be enabled
  enabled: true
  ## configuration of the image to be used
  image:
    # -- repository to be used - resource friendly all-in-one-runner without kafka
    repository: scorpiobroker/all-in-one-runner
    # -- tag of the image to be used - latest java image without kafka
    tag: java-4.1.10
  ## configuration of the database to be used by broker
  db:
    # -- host of the db
    dbhost: data-service-postgis
    # -- username to be used
    user: postgres
    existingSecret:
      enabled: true
      name: data-service-secret
      key: postgres-admin-password
  ## configuration of the readiness probe
  readinessProbe:
    # -- path to be used for the readiness probe, older versions used /actuator/health
    path: /q/health
  ## configuration of the liveness probe
  livenessProbe:
    # -- path to be used for the readiness probe, older versions used /actuator/health
    path: /q/health
  ## configuration to be used for the service offered by scorpio
  service:
    # -- ClusterIP is the recommended type for most clusters
    type: ClusterIP
  # -- configuration to register the dataplane at the credentials-config-service
  ccs:
    # -- should the automatic registration of scorpio be enabled
    enabled: false
    # -- endpoint of the ccs to regsiter at
    endpoint: http://credentials-config-service:8080
    # -- configmap to get the registration information from
    configMap: scorpio-registration

  # -- additional init containers to be used for the dataplane
  #initContainers:
    # -- curl container to register at the credentials config service
    #- name: register-credential-config
    #  image: quay.io/curl/curl:8.1.2
    #  command: [ "/bin/sh", "-c", "/bin/init.sh" ]
    #  volumeMounts:
    #    - name: scorpio-registration
    #      mountPath: /bin/init.sh
    #      subPath: init.sh
  # -- additonal volumes to be mounted for the dataplane
  additionalVolumes:
    - name: scorpio-registration
      configMap:
        name: scorpio-registration
        defaultMode: 0755

# -- configuration to issue credentials, using a did:elsi
elsi:
  # -- should a did:elsi be used
  enabled: false
  # -- keystore to be used for signing the credentials 
  # keystore: 
    # store.p12: <THE_ENCODED_CONTENT>
  # -- the did to be used
  did:
  # -- algorithm of the signing key
  keyAlgorithm:
  # -- path to the keystore 
  storePath:
  # -- password for the keystore
  storePassword:
  # -- alias of the key
  keyAlias: 
  # -- password of the key
  keyPassword:

## configuration of the keycloak - see https://github.com/bitnami/charts/tree/main/bitnami/keycloak for details
keycloak:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  # -- disable the security context, required by the current quarkus container, will be solved in the future chart versions of keycloak
  containerSecurityContext:
    enabled: false
  proxyHeaders: xforwarded
  proxy: edge
  service:
    ports:
      http: 8080
  # -- authentication config for keycloak
  auth:
    existingSecret: issuance-secret
    passwordSecretKey: keycloak-admin
    adminUser: keycloak-admin
  # -- should the db be deployed as part of the keycloak chart
  postgresql:
    enabled: false
  # -- host of the external db to be used
  externalDatabase:
    host: postgresql
    database: keycloak
    user: postgres
    existingSecret: database-secret
    existingSecretPasswordKey: postgres-admin-password

  # -- extra volumes to be mounted
  extraVolumeMounts:
    - name: realms
      mountPath: /opt/bitnami/keycloak/data/import

  # -- extra env vars to be set. we require them at the moment, since some of the chart config mechanisms only work with the bitnami-image
  extraEnvVars:
    - name: KEYCLOAK_LOG_LEVEL
      value: INFO
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"
    - name: KC_FEATURES
      value: "oid4vc-vci"
    # password for reading the key store connected to the did
    - name: STORE_PASS
      valueFrom:
        secretKeyRef:
          name: issuance-secret
          key: store-pass
    # keycloak admin password
    - name: KC_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: issuance-secret
          key: keycloak-admin

  # -- configuration of the realm to be imported
  realm:
    # -- should the realm be imported
    import: true
    # -- name of the realm
    name: test-realm
    # -- frontend url to be used for the realm
    frontendURL: http://localhost:8080
    # -- client roles to be imported - be aware the env vars can be used and will be replaced
    clientRoles: |
      "${DID}": [
        {
          "name": "ADMIN",
          "description": "Is allowed to do everything",
          "clientRole": true
        }
      ]
    # -- users to be imported - be aware the env vars can be used and will be replaced
    users: |
      {
        "username": "admin-user",
        "enabled": true,
        "email": "admin@provider.org",
        "firstName": "Test",
        "lastName": "Admin",
        "credentials": [
          {
            "type": "password",
            "value": "test"
          }
        ],
        "clientRoles": {
          "${DID}": [
            "ADMIN"
          ],
          "account": [
            "view-profile",
            "manage-account"
          ]
        },
        "groups": [
        ]
      }
    # -- clients to be imported - be aware the env vars can be used and will be replaced
    clients: |
      {
        "clientId": "${DID}",
        "enabled": true,
        "description": "Client to manage itself",
        "surrogateAuthRequired": false,
        "alwaysDisplayInConsole": false,
        "clientAuthenticatorType": "client-secret",
        "defaultRoles": [],
        "redirectUris": [],
        "webOrigins": [],
        "notBefore": 0,
        "bearerOnly": false,
        "consentRequired": false,
        "standardFlowEnabled": true,
        "implicitFlowEnabled": false,
        "directAccessGrantsEnabled": false,
        "serviceAccountsEnabled": false,
        "publicClient": false,
        "frontchannelLogout": false,
        "protocol": "oid4vc",
        "attributes": {
          "client.secret.creation.time": "1675260539",
          "vc.natural-person.format": "jwt_vc",
          "vc.natural-person.scope": "NaturalPersonCredential",
          "vc.verifiable-credential.format": "jwt_vc",
          "vc.verifiable-credential.scope": "VerifiableCredential"
        },
        "protocolMappers": [
          {
            "name": "target-role-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-target-role-mapper",
            "config": {
              "subjectProperty": "roles",
              "clientId": "${DID}",
              "supportedCredentialTypes": "NaturalPersonCredential"
            }
          },
          {
            "name": "target-vc-role-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-target-role-mapper",
            "config": {
              "subjectProperty": "roles",
              "clientId": "${DID}",
              "supportedCredentialTypes": "VerifiableCredential"
            }
          },
          {
            "name": "context-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-context-mapper",
            "config": {
              "context": "https://www.w3.org/2018/credentials/v1",
              "supportedCredentialTypes": "VerifiableCredential,NaturalPersonCredential"
            }
          },
          {
            "name": "email-mapper",
            "protocol": "oid4vc",
            "protocolMapper": "oid4vc-user-attribute-mapper",
            "config": {
              "subjectProperty": "email",
              "userAttribute": "email",
              "supportedCredentialTypes": "NaturalPersonCredential"
            }
          }
        ],
        "authenticationFlowBindingOverrides": {},
        "fullScopeAllowed": true,
        "nodeReRegistrationTimeout": -1,
        "defaultClientScopes": [],
        "optionalClientScopes": []
      }
  # -- configuration for the signing key to be used for issuing credentials
  # signingKey:
    # -- path to the keystore containing the signing key
    # storePath:
    # -- password for the keystore containing the signing key
    # storePassword:
    # -- alias of the signing key
    # keyAlias:
    # -- password of the signing key
    # keyPassword:
    # -- algorithm of the signing key
    # keyAlgorithm: 
    # -- did that the key belongs to 
    # did: 

## configuration of the tm-forum-api - see https://github.com/FIWARE/helm-charts/tree/main/charts/tm-forum-api for details
tm-forum-api:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  ## configuration to be used by every api-deployment if nothing specific is provided.
  defaultConfig:
    # --  ngsi-ld broker connection information
    ngsiLd:
      # -- address of the broker
      url: http://data-service-scorpio:9090
    contextUrl: https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld
    additionalEnvVars: 
      - name: API_EXTENSION_ENABLED
        value: "true"
      - name: GENERAL_NGSILDORQUERYVALUE
        value: ","
      - name: GENERAL_NGSILDORQUERYKEY
        value: ","
      - name: GENERAL_ENCLOSEQUERY
        value: "false"
  # enable the api proxy
  apiProxy:
    enabled: true
    image:
      tag: distroless-v1.27-latest
    service:
      # -- name to be used for the proxy service.
      nameOverride: tm-forum-api


  # -- list of apis to be deployed
  # -- every api needs to define a name and image. Basepath is required when routes or ingress will be enabled. Beside that, they can overwrite the default-config by using the same keys.
  # -- be aware: when you change the image repositrory or the tag for an api, you have to provide both values for the changes to take effect
  apis:
    - name: party-catalog
      image: tmforum-party-catalog
      basePath: /tmf-api/party/v4

    - name: customer-bill-management
      image: tmforum-customer-bill-management
      basePath: /tmf-api/customerBillManagement/v4

    - name: customer-management
      image: tmforum-customer-management
      basePath: /tmf-api/customerManagement/v4

    - name: product-catalog
      image: tmforum-product-catalog
      basePath: /tmf-api/productCatalogManagement/v4

    - name: product-inventory
      image: tmforum-product-inventory
      basePath: /tmf-api/productInventory/v4

    - name: product-ordering-management
      image: tmforum-product-ordering-management
      basePath: /tmf-api/productOrderingManagement/v4

    - name: resource-catalog
      image: tmforum-resource-catalog
      basePath: /tmf-api/resourceCatalog/v4

    - name: resource-function-activation
      image: tmforum-resource-function-activation
      basePath: /tmf-api/resourceFunctionActivation/v4

    - name: resource-inventory
      image: tmforum-resource-inventory
      basePath: /tmf-api/resourceInventoryManagement/v4

    - name: service-catalog
      image: tmforum-service-catalog
      basePath: /tmf-api/serviceCatalogManagement/v4

    - name: agreement
      image: tmforum-agreement
      basePath: /tmf-api/agreementManagement/v4

    - name: usage-management
      image: tmforum-usage-management
      basePath: /tmf-api/usageManagement/v4

    - name: quote
      image: tmforum-quote
      basePath: /tmf-api/quote/v4

    - name: account
      image: tmforum-account
      basePath: /tmf-api/accountManagement/v4
      
  # redis caching
  redis:
    enabled: false

  registration:
    enabled: true
    # -- name to be used for the registration jobs
    name: tmf-api-registration
    # -- configuration to register the dataplane at the credentials-config-service
    ccs:
      # -- endpoint of the ccs to regsiter at
      endpoint: http://credentials-config-service:8080
      # -- service id of the data-service to be used
      id: tmf-api
      # -- default scope to be created for the data plane
      defaultOidcScope:
        # -- name of the scope
        name: default
        # -- name of the default credential to be configured
        credentialType: VerifiableCredential
        # -- needs to be updated for the concrete dataspace
        trustedParticipantsLists: http://tir.trust-anchor.org
        trustedIssuersLists: http://trusted-issuers-list:8080


## configuration of rainbow to provide integration with the Dataspace Protocol
rainbow:
  # -- should rainbow be enabled
  enabled: false
  # -- database configuration of rainbow
  db:
    # -- host of the database to be used
    url:
    # -- user to be used when accesing the database
    user: 
    # -- secret containing the password for the database
    existingSecret:
    # -- key of the password inside that secret
    passwordKey:
  # -- configuration for external access to rainbow
  ingress:
    # -- should the ingress be enabled
    enabled: false
  # -- configuration of service access to rainbow
  service:
    # -- service type to be used
    serviceType: ClusterIP
    # -- port of the service
    port: 8080
  # -- configuration to register rainbow at the credentials-config-service
  ccs:
    # -- should the registration at the credentials-config-service be enabled
    enabled: false
    # -- endpoint of the ccs to regsiter at
    endpoint: http://credentials-config-service:8080
    # -- configmap to get the registration information from
    configMap: rainbow-registration
    # -- service id of the data-service to be used
    id: tpp-service

## configuration of the tm-forum-api - see https://github.com/FIWARE/helm-charts/tree/main/charts/contract-management for details
contract-management:
  # -- should it be enabled? set to false if one outside the chart is used.
  enabled: true
  fullnameOverride: contract-management
  services:
    ## Config for Trusted Issuers List
    trusted-issuers-list:
      ## URL of the Trusted Issuers List Service
      url: http://trusted-issuers-list:8080
    ## Config for the TM Forum Service hosting the APIs
    product-order:
      ## URL of the TM Forum Service hosting the Product Ordering API
      url: http://tm-forum-api:8080
    party:
      ## URL of the TM Forum Service hosting the Party API
      url: http://tm-forum-api:8080
    product-catalog:
      ## URL of the TM Forum Service hosting the Product Catalog API
      url: http://tm-forum-api:8080
    service-catalog:
      ## URL of the TM Forum Service hosting the Service Catalog API
      url: http://tm-forum-api:8080
    tmforum-agreement-api:
      ## URL of the TM Forum Service hosting the Agreement API
      url: http://tm-forum-api:8080
    quote:
      ## URL of the TM Forum Service hosting the Quote API
      url: http://tm-forum-api:8080
    rainbow:
      ## URL for the Rainbow service
      url: http://rainbow:8080
    quote:
      ## URL for the Rainbow service
      url: http://tm-forum-api:8080

# -- configuration for the did-helper, should only be used for demonstrational deployments, see https://github.com/wistefan/did-helper
did:
  enabled: false

# -- configuration for registering a participant at the til, will most probably only be used in demonstrational enviornments
registration:
  enabled: false
  prepScript: "test"

# -- configuration for the .well-known/data-space-configuration endpoint document
dataSpaceConfig:
  enabled: false

  # -- Kubernetes Service type
  serviceType: ClusterIP

  # -- Kubernetes Service port
  port: 3002

  # -- Supported data models by the service (array of links to JSON schemas)
  supportedModels: []

  # -- Supported protocols (e.g.: http,https)
  supportedProtocols: []

  # -- Supported authentication protocols (e.g.: oid4vp)
  authenticationProtocols: []


didJson:
  enabled: false
  key:

# -- configuration of mongo db to be used for the marketplace
mongodb:
  enabled: false
  fullnameOverride: mongodb
  auth:
    enabled: true
    existingSecret: marketplace-secret
  initdbScriptsConfigMap: mongodb-bae-configmap
  extraEnvVarsSecret: marketplace-secret-env

# -- configuration for the marketplace components
marketplace:
  enabled: false
  generatePasswords:
    # -- should a password for the database connection of marketplace components be generated in the cluster
    enabled: true
    # -- name of the secret to put the generated password into
    secretName: marketplace-secret
  # -- should the tmforum deployed together with the marketplace?
  bizEcosystemApis:
    enabled: false
  # -- should RSS be enabled?
  bizEcosystemRss:
    enabled: false
  # -- should vc based auth enabled?
  siop:
    enabled: true
    # -- should the market place automatically registered in the credentials config service?
    ccs:
      enabled: false
    # -- paths to the verifier
    verifier:
      qrCodePath: /api/v2/loginQR
      tokenPath: /token
      jwksPath: /.well-known/jwks
    # -- roles allowed by the market
    allowedRoles:
      - seller
      - customer
      - admin
  
  # -- configuration for the charging backend
  bizEcosystemChargingBackend:

    # -- max size to be used for the market
    maxUploadSize: "5242880"

    serviceAccount:
      create: true

    # -- configuration of the charging backend to be deployed
    deployment:
      image:
        tag: 10.0.1
    
    # -- should plugin support be enabled
    plugins:
      enabled: false

    media:
      enabled: false
    
    port: 8006

    loglevel: debug

    payment:
      method: None


    backup:
      enabled: false

    initContainers: false
    propagateToken: true
    basePath: /opt/business-ecosystem-charging-backend
    token: 
      enabled: false

    db:
      host: mongodb
      database: charging_db
      user: charging

  oauth:
    provider: "vc"

  # -- configuration for the logic proxy
  bizEcosystemLogicProxy:

    serviceAccount:
      create: true
    
    existingSecret: marketplace-secret

    # -- image to be used for the statefulset
    statefulset:
      image:
        repository: fiware/biz-ecosystem-logic-proxy
        tag: "10.1.1-PRE-5"
        pullPolicy: Always


    port: 8004
    nodeEnvironment: production

    # -- db config
    db:
      host: mongodb
      database: belp_db
      user: belp
      secretKey: mongodb-root-password
    basePath: /opt/business-ecosystem-logic-proxy

    externalIdp:
      enabled: true
    initContainers: false
    propagateToken: true